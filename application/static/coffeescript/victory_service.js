// Generated by CoffeeScript 1.6.3
(function() {
  var s;

  s = angular.module('victory.service', []);

  s.factory('$victory', function($http, $rootScope) {
    var application, common, document, setting, stupidBrowser, user_agent;
    user_agent = navigator.userAgent.toLowerCase();
    stupidBrowser = user_agent.indexOf('msie') !== -1;
    common = {
      ajax: function(args) {
        var h,
          _this = this;
        if (args == null) {
          args = {};
        }
        /*
        victory ajax function
        :param args: {method, cache, data, error(), success(), beforSend(), hideLoadingAfterDown}
        */

        if (args.method == null) {
          args.method = 'get';
        }
        if (args.cache == null) {
          args.cache = false;
        }
        if (args.data == null) {
          args.data = '';
        }
        if (args.error == null) {
          args.error = function() {};
        }
        if (args.success == null) {
          args.success = function() {};
        }
        if (args.hideLoadingAfterDone == null) {
          args.hideLoadingAfterDone = true;
        }
        this.loading.on('Loading...');
        if (args.beforeSend) {
          args.beforeSend();
        }
        h = $http({
          url: args.url,
          method: args.method,
          cache: args.ache,
          data: args.data
        });
        h.error(function(data, status, headers, config) {
          if (args.hideLoadingAfterDone) {
            _this.loading.off();
          }
          _this.message.error(status);
          return args.error(data, status, headers, config);
        });
        return h.success(function(data, status, headers, config) {
          if (args.hideLoadingAfterDone) {
            _this.loading.off();
          }
          if (data.__status__ === 302 && data.location) {
            location.href = data.location;
            return;
          }
          return args.success(data, status, headers, config);
        });
      },
      message: {
        error: function(status) {
          /*
          pop error message.
          */

          switch (status) {
            case 400:
              return $.av.pop({
                title: 'Input Failed',
                message: 'Please check input values.',
                template: 'error'
              });
            case 403:
              return $.av.pop({
                title: 'Permission denied',
                message: 'Please check your permission.',
                template: 'error'
              });
            default:
              return $.av.pop({
                title: 'Error',
                message: 'Loading failed, please try again later.',
                template: 'error'
              });
          }
        }
      },
      loading: {
        /*
        Show/Hide loading effect.
        */

        on: function(message) {
          /*
          loading
          */

          var loading, loading_height;
          $('body, a, .table-pointer tbody tr').css({
            cursor: 'wait'
          });
          if (this.stupidBrowser) {
            return;
          }
          if ($('#loading').length > 0) {
            $('#loading .message').html(message);
            return;
          }
          loading = $("<div id='loading'><div class='spin'></div><div class='message'>" + message + "</div><div class='cs_clear'></div></div>");
          $('body').append(loading);
          loading_height = $('#loading').height();
          $('#loading').css({
            bottom: -loading_height
          });
          $('#loading').animate({
            bottom: '+=' + (loading_height + 10)
          }, 400, 'easeOutExpo');
          return Spinner({
            color: '#444',
            width: 2,
            length: 4,
            radius: 4
          }).spin($('#loading .spin')[0]);
        },
        off: function() {
          var loading_height;
          $('body').css({
            cursor: 'default'
          });
          $('a, .table-pointer tbody tr').css({
            cursor: 'pointer'
          });
          if (this.stupidBrowser) {
            return;
          }
          $('#loading').dequeue();
          loading_height = $('#loading').height() + 10;
          return $('#loading').animate({
            bottom: '-=' + loading_height
          }, 400, 'easeInExpo', function() {
            return $(this).remove();
          });
        }
      }
    };
    setting = {
      httpApplications: function() {
        /*
        Get applications of the settings.
        :return: $http object
        */

        return common.ajax({
          url: '/settings/applications'
        });
      },
      getApplications: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Get applications of the settings.
        :param args: {success()}
        */

        return common.ajax({
          url: '/settings/applications',
          success: args.success
        });
      },
      addApplication: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Add the application.
        :param args: {data:{name, description}, error(), success()}
        */

        return common.ajax({
          method: 'post',
          url: '/settings/applications',
          data: args.data,
          error: args.error,
          success: args.success
        });
      },
      updateApplication: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Update the application.
        :param args: {id, data:{name, description}, error(), success()}
        */

        return common.ajax({
          method: 'put',
          url: "/settings/applications/" + args.id,
          data: args.data,
          error: args.error,
          success: args.success
        });
      },
      deleteApplication: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Delete the application by id.
        :param args: {id, success()}
        */

        return common.ajax({
          method: 'delete',
          url: "/settings/applications/" + args.id,
          success: args.success
        });
      },
      inviteUser: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Invite the user into the application.
        :param args: {applicationId, email, success()}
        */

        return common.ajax({
          method: 'post',
          url: "/settings/applications/" + args.applicationId + "/members",
          data: {
            email: args.email
          },
          success: args.success
        });
      },
      deleteMember: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Delete the member from the application.
        :param args: {applicationId, memberId, success()}
        */

        return common.ajax({
          method: 'delete',
          url: "/settings/applications/" + args.applicationId + "/members/" + args.memberId,
          success: args.success
        });
      },
      httpUsers: function() {
        /*
        Get users of the settings.
        :return: $http object
        */

        return common.ajax({
          url: '/settings/users'
        });
      },
      getUsers: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Get users of the settings.
        :param args: {success()}
        */

        return common.ajax({
          url: '/settings/users',
          success: args.success
        });
      },
      addUser: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Add an user.
        :param args: {email, success()}
        */

        return common.ajax({
          method: 'post',
          url: '/settings/users',
          data: {
            email: args.email
          },
          success: args.success
        });
      },
      deleteUser: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Delete the user by id.
        :param args: {id, success()}
        */

        return common.ajax({
          method: 'delete',
          url: "/settings/users/" + args.id,
          success: args.success
        });
      },
      httpProfile: function() {
        /*
        Get the profile.
        :return: $http object
        */

        return common.ajax({
          url: '/settings/profile'
        });
      },
      getProfile: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Get the profile.
        :param args: {success()}
        */

        return common.ajax({
          url: '/settings/profile',
          success: args.success
        });
      },
      updateProfile: function(args) {
        if (args == null) {
          args = {};
        }
        /*
        Update the profile.
        :param args: {name, error(), success()}
        */

        return common.ajax({
          method: 'put',
          url: '/settings/profile',
          data: {
            name: args.name
          },
          error: args.error,
          success: args.success
        });
      }
    };
    application = {};
    document = {};
    return {
      stupidBrowser: stupidBrowser,
      pageSize: 20,
      common: common,
      setting: setting,
      application: application,
      document: document
    };
  });

}).call(this);
